version: '3.8'

x-airflow-common: &airflow-common
  image: custom-airflow:latest
  build: .
  environment:
    - AIRFLOW__CORE__EXECUTOR=LocalExecutor
    - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${DB_USER}:${DB_PASSWORD}@postgres-1/${DB_NAME}
    - AIRFLOW__CORE__FERNET_KEY='53zdJPr7nq9Cqye969_yB4b1ONp30JqBO-_6w_4nIxA='
    - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=false
    - AIRFLOW__CORE__LOAD_EXAMPLES=false
    - AIRFLOW__API__AUTH_BACKENDS=airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session
    - AIRFLOW_HOME=/opt/airflow
    - OPENEXCHANGERATES_API_KEY=${OPENEXCHANGERATES_API_KEY}
    - AIRFLOW_CONN_POSTGRES_1=postgres://${DB_USER}:${DB_PASSWORD}@postgres-1:5432/${DB_NAME}
    - AIRFLOW_CONN_POSTGRES_2=postgres://${DB_USER}:${DB_PASSWORD}@postgres-2:5432/${DB_NAME}
    - BATCH_SIZE=${BATCH_SIZE}
    - ORDER_DATE_MIN_DAYS_AGO=${ORDER_DATE_MIN_DAYS_AGO}
    - BASE_CURRENCY=${BASE_CURRENCY}
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./.env:/opt/airflow/.env
  networks:
    - airflow-network

services:
  postgres-1:
    image: postgres:16-bullseye
    container_name: postgres-1
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres1_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "${DB_NAME}", "-U", "${DB_USER}"]
      interval: 5s
      timeout: 10s
      retries: 5
    networks:
      - airflow-network
      
  postgres-2:
    image: postgres:16-bullseye
    container_name: postgres-2
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres2_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "${DB_NAME}", "-U", "${DB_USER}"]
      interval: 5s
      timeout: 10s
      retries: 5
    networks:
      - airflow-network

  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        airflow db init
        airflow users create \
          --username admin \
          --password admin \
          --firstname Admin \
          --lastname User \
          --role Admin \
          --email admin@example.com
        exit 0
    restart: "no"
    depends_on:
      postgres-1:
        condition: service_healthy
      postgres-2:
        condition: service_healthy

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: scheduler
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      airflow-webserver:
        condition: service_started

networks:
  airflow-network:
    driver: bridge

volumes:
  postgres1_data:
  postgres2_data: